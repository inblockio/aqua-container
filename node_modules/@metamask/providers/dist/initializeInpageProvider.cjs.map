{"version":3,"file":"initializeInpageProvider.cjs","sourceRoot":"","sources":["../src/initializeInpageProvider.ts"],"names":[],"mappings":";;;AAGA,2CAA6C;AAE7C,yEAAkE;AAClE,6CAAsC;AAwBtC;;;;;;;;;;;;;GAaG;AACH,SAAgB,kBAAkB,CAAC,EACjC,gBAAgB,EAChB,iBAAiB,EACjB,MAAM,GAAG,OAAO,EAChB,iBAAiB,GAAG,GAAG,EACvB,YAAY,EACZ,kBAAkB,GAAG,IAAI,EACzB,iBAAiB,GAAG,IAAI,EACxB,cAAc,GAAG,KAAK,GACI;IAC1B,MAAM,QAAQ,GAAG,IAAI,+CAAsB,CAAC,gBAAgB,EAAE;QAC5D,iBAAiB;QACjB,MAAM;QACN,iBAAiB;QACjB,kBAAkB;KACnB,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE;QAC1C,0DAA0D;QAC1D,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI;QAC1B,uEAAuE;QACvE,uCAAuC;QACvC,GAAG,CAAC,MAAM,EAAE,QAA0D;YACpE,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;KACF,CAAC,CAAC;IAEH,IAAI,YAAY,EAAE,CAAC;QACjB,IAAA,0BAAgB,EAAC;YACf,IAAI,EAAE,YAAY;YAClB,QAAQ,EAAE,eAAe;SAC1B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,iBAAiB,EAAE,CAAC;QACtB,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,cAAc,EAAE,CAAC;QACnB,IAAA,mBAAQ,EAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AA3CD,gDA2CC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAC/B,gBAAwC;IAEvC,MAA8B,CAAC,QAAQ,GAAG,gBAAgB,CAAC;IAC5D,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC1D,CAAC;AALD,8CAKC","sourcesContent":["import type { Duplex } from 'readable-stream';\n\nimport type { EIP6963ProviderInfo } from './EIP6963';\nimport { announceProvider } from './EIP6963';\nimport type { MetaMaskInpageProviderOptions } from './MetaMaskInpageProvider';\nimport { MetaMaskInpageProvider } from './MetaMaskInpageProvider';\nimport { shimWeb3 } from './shimWeb3';\n\ntype InitializeProviderOptions = {\n  /**\n   * The stream used to connect to the wallet.\n   */\n  connectionStream: Duplex;\n\n  /**\n   * The EIP-6963 provider info that should be announced if set.\n   */\n  providerInfo?: EIP6963ProviderInfo;\n\n  /**\n   * Whether the provider should be set as window.ethereum.\n   */\n  shouldSetOnWindow?: boolean;\n\n  /**\n   * Whether the window.web3 shim should be set.\n   */\n  shouldShimWeb3?: boolean;\n} & MetaMaskInpageProviderOptions;\n\n/**\n * Initializes a MetaMaskInpageProvider and (optionally) assigns it as window.ethereum.\n *\n * @param options - An options bag.\n * @param options.connectionStream - A Node.js stream.\n * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n * @param options.maxEventListeners - The maximum number of event listeners.\n * @param options.providerInfo - The EIP-6963 provider info that should be announced if set.\n * @param options.shouldSendMetadata - Whether the provider should send page metadata.\n * @param options.shouldSetOnWindow - Whether the provider should be set as window.ethereum.\n * @param options.shouldShimWeb3 - Whether a window.web3 shim should be injected.\n * @param options.logger - The logging API to use. Default: `console`.\n * @returns The initialized provider (whether set or not).\n */\nexport function initializeProvider({\n  connectionStream,\n  jsonRpcStreamName,\n  logger = console,\n  maxEventListeners = 100,\n  providerInfo,\n  shouldSendMetadata = true,\n  shouldSetOnWindow = true,\n  shouldShimWeb3 = false,\n}: InitializeProviderOptions): MetaMaskInpageProvider {\n  const provider = new MetaMaskInpageProvider(connectionStream, {\n    jsonRpcStreamName,\n    logger,\n    maxEventListeners,\n    shouldSendMetadata,\n  });\n\n  const proxiedProvider = new Proxy(provider, {\n    // some common libraries, e.g. web3@1.x, mess with our API\n    deleteProperty: () => true,\n    // fix issue with Proxy unable to access private variables from getters\n    // https://stackoverflow.com/a/73051482\n    get(target, propName: 'chainId' | 'networkVersion' | 'selectedAddress') {\n      return target[propName];\n    },\n  });\n\n  if (providerInfo) {\n    announceProvider({\n      info: providerInfo,\n      provider: proxiedProvider,\n    });\n  }\n\n  if (shouldSetOnWindow) {\n    setGlobalProvider(proxiedProvider);\n  }\n\n  if (shouldShimWeb3) {\n    shimWeb3(proxiedProvider, logger);\n  }\n\n  return proxiedProvider;\n}\n\n/**\n * Sets the given provider instance as window.ethereum and dispatches the\n * 'ethereum#initialized' event on window.\n *\n * @param providerInstance - The provider instance.\n */\nexport function setGlobalProvider(\n  providerInstance: MetaMaskInpageProvider,\n): void {\n  (window as Record<string, any>).ethereum = providerInstance;\n  window.dispatchEvent(new Event('ethereum#initialized'));\n}\n"]}